package languages

import (
	"os"
	"path"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/aretext/aretext/syntax/parser"
)

func TestYamlTokenizer(t *testing.T) {
	const tokenRoleKey = parser.TokenRoleCustom1
	testCases := []struct {
		name     string
		text     string
		expected []TokenWithText
	}{
		{
			name: "single line comment",
			text: `# abc`,
			expected: []TokenWithText{
				{Text: `# abc`, Role: parser.TokenRoleComment},
			},
		},
		{
			name: "comment right before end of file",
			text: "#",
			expected: []TokenWithText{
				{
					Role: parser.TokenRoleComment,
					Text: "#",
				},
			},
		},
		{
			name: "key without quotes",
			text: "abc: xyz",
			expected: []TokenWithText{
				{Text: `abc:`, Role: tokenRoleKey},
			},
		},
		{
			name: "key with single-quoted string",
			text: "'abc': xyz",
			expected: []TokenWithText{
				{Text: `'abc':`, Role: tokenRoleKey},
			},
		},
		{
			name: "empty single-quoted string",
			text: `''`,
			expected: []TokenWithText{
				{Text: `''`, Role: parser.TokenRoleString},
			},
		},
		{
			name: "single-quoted string",
			text: `'abc'`,
			expected: []TokenWithText{
				{Text: `'abc'`, Role: parser.TokenRoleString},
			},
		},
		{
			name: "single-quoted string with escaped quote",
			text: `'ab''c'`,
			expected: []TokenWithText{
				{Text: `'ab''c'`, Role: parser.TokenRoleString},
			},
		},
		{
			name: "doc with keys, number, and comment",
			text: `- foo: # this is a test
							bar: 123`,
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: "# this is a test\n", Role: parser.TokenRoleComment},
				{Text: `bar:`, Role: tokenRoleKey},
				{Text: `123`, Role: parser.TokenRoleNumber},
			},
		},
		{
			name: "unquoted string with number suffix",
			text: "foo: v0.1.2",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			tokens := ParseTokensWithText(YamlParseFunc(), tc.text)
			assert.Equal(t, tc.expected, tokens)
		})
	}
}

func TestYamlTokenizerValidYamlTestSuite(t *testing.T) {
	const tokenRoleKey = parser.TokenRoleCustom1
	const tokenRoleScalar = parser.TokenRoleCustom2
	const tokenRoleAlias = parser.TokenRoleCustom3
	const tokenRoleDirective = parser.TokenRoleCustom4
	const tokenRoleTag = parser.TokenRoleCustom5

	testCases := []struct {
		filename string
		expected []TokenWithText
	}{
		{
			filename: "aliases-in-block-sequence.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&b`, Role: tokenRoleAlias},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `*a`, Role: tokenRoleAlias},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `*b`, Role: tokenRoleAlias},
			},
		},
		{
			filename: "aliases-in-explicit-block-mapping.yaml",
			expected: []TokenWithText{
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `&b`, Role: tokenRoleAlias},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `*a`, Role: tokenRoleAlias},
			},
		},
		{
			filename: "aliases-in-flow-objects.yaml",
			expected: []TokenWithText{
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `[a, &b b]:`, Role: tokenRoleKey},
				{Text: `*b`, Role: tokenRoleAlias},
				{Text: `*a :`, Role: tokenRoleKey},
				{Text: `c`, Role: tokenRoleScalar},
				{Text: `*b`, Role: tokenRoleAlias},
				{Text: `d`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "aliases-in-implicit-block-mapping.yaml",
			expected: []TokenWithText{
				{Text: `&a a:`, Role: tokenRoleKey},
				{Text: `&b`, Role: tokenRoleAlias},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `*b :`, Role: tokenRoleKey},
				{Text: `*b`, Role: tokenRoleAlias},
			},
		},
		{
			filename: "allowed-characters-in-keys.yaml",
			expected: []TokenWithText{
				{Text: "a!\"#$%&'()*+,-./09:;<=>?@AZ[\\]^_`az{|}~:", Role: tokenRoleKey},
				{Text: `safe`, Role: tokenRoleScalar},
				{Text: `?foo:`, Role: tokenRoleKey},
				{Text: `safe question mark`, Role: tokenRoleScalar},
				{Text: `:foo:`, Role: tokenRoleKey},
				{Text: `safe colon`, Role: tokenRoleScalar},
				{Text: `-foo:`, Role: tokenRoleKey},
				{Text: `safe dash`, Role: tokenRoleScalar},
				{Text: `this is#not:`, Role: tokenRoleKey},
				{Text: `a comment`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "allowed-characters-in-plain-scalars.yaml",
			expected: []TokenWithText{
				{Text: `safe:`, Role: tokenRoleKey},
				{Text: "a!\"#$%&'()*+,-./09:;<=>?@AZ[\\]^_`az{|}~\n    !\"#$%&'()*+,-./09:;<=>?@AZ[\\]^_`az{|}~", Role: tokenRoleScalar},
				{Text: `safe question mark:`, Role: tokenRoleKey},
				{Text: `?foo`, Role: tokenRoleScalar},
				{Text: `safe colon:`, Role: tokenRoleKey},
				{Text: `:foo`, Role: tokenRoleScalar},
				{Text: `safe dash:`, Role: tokenRoleKey},
				{Text: `-foo`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "allowed-characters-in-quoted-mapping-key.yaml",
			expected: []TokenWithText{
				{Text: `"foo\nbar:baz\tx \\$%^&*()x":`, Role: tokenRoleKey},
				{Text: `23`, Role: parser.TokenRoleNumber},
				{Text: `'x\ny:z\tx $%^&*()x':`, Role: tokenRoleKey},
				{Text: `24`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "anchor-before-zero-indented-sequence.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `seq:`, Role: tokenRoleKey},
				{Text: `&anchor`, Role: tokenRoleAlias},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `b`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "anchor-for-empty-node.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `&anchor`, Role: tokenRoleAlias},
				{Text: `b:`, Role: tokenRoleKey},
				{Text: `*anchor`, Role: tokenRoleAlias},
			},
		},
		{
			filename: "anchors-and-tags.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `!!str`, Role: tokenRoleTag},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `!!int`, Role: tokenRoleTag},
				{Text: `2`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `!!int`, Role: tokenRoleTag},
				{Text: `&c`, Role: tokenRoleAlias},
				{Text: `4`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&d`, Role: tokenRoleAlias},
				{Text: `d`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "anchors-in-mapping.yaml",
			expected: []TokenWithText{
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c:`, Role: tokenRoleKey},
				{Text: `&d`, Role: tokenRoleAlias},
				{Text: `d`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "anchors-on-empty-scalars.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&c`, Role: tokenRoleAlias},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `&a`, Role: tokenRoleAlias},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `&d`, Role: tokenRoleAlias},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `&e`, Role: tokenRoleAlias},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `&a`, Role: tokenRoleAlias},
			},
		},
		{
			filename: "anchor-with-colon-in-the-middle.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `&an:chor`, Role: tokenRoleAlias},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "anchor-with-unicode-character.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&üòÅ`, Role: tokenRoleAlias},
				{Text: `unicode anchor`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "backslashes-in-singlequotes.yaml",
			expected: []TokenWithText{
				{Text: `'foo: bar\':`, Role: tokenRoleKey},
				{Text: `baz'`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "bare-document-after-document-end-marker.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `scalar1`, Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "blank-lines.yaml",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: `1`, Role: parser.TokenRoleNumber},
				{Text: `bar:`, Role: tokenRoleKey},
				{Text: `2`, Role: parser.TokenRoleNumber},
				{Text: `text:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "  a\n\n  b\n\n  c\n\n  d", Role: tokenRoleScalar},
			},
		},
		{
			filename: "block-mappings-in-block-sequence.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
				{Text: `key2:`, Role: tokenRoleKey},
				{Text: `value2`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `key3:`, Role: tokenRoleKey},
				{Text: `value3`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "block-mapping-with-missing-keys.yaml",
			expected: []TokenWithText{
				{Text: `:`, Role: tokenRoleKey},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "block-mapping-with-missing-values.yaml",
			expected: []TokenWithText{
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c:`, Role: tokenRoleKey},
			},
		},
		{
			filename: "block-mapping-with-multiline-scalars.yaml",
			expected: []TokenWithText{
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: "a\n  true\n:", Role: tokenRoleKey},
				{Text: `null d`, Role: tokenRoleScalar},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: "e\n  42", Role: tokenRoleKey},
			},
		},
		{
			filename: "block-scalar-indicator-order.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `|2-`, Role: parser.TokenRoleOperator},
				{Text: `explicit indent and chomp`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `|-2`, Role: parser.TokenRoleOperator},
				{Text: `chomp and explicit indent`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "block-scalar-keep.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `|+`, Role: parser.TokenRoleOperator},
				{Text: `ab`, Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "block-scalar-strip-1-3.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `|-`, Role: parser.TokenRoleOperator},
				{Text: `ab`, Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "block-sequence-in-block-mapping.yaml",
			expected: []TokenWithText{
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `item1`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `item2`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "block-sequence-in-block-sequence.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `s1_i1`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `s1_i2`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `s2`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "block-submapping.yaml",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: `bar:`, Role: tokenRoleKey},
				{Text: `1`, Role: parser.TokenRoleNumber},
				{Text: `baz:`, Role: tokenRoleKey},
				{Text: `2`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "colon-and-adjacent-value-after-comment-on-next-line.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `"foo"`, Role: tokenRoleKey},
				{Text: `# comment`, Role: parser.TokenRoleComment},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `bar`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "colon-and-adjacent-value-on-next-line.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `"foo"`, Role: tokenRoleKey},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `bar`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "colon-at-the-beginning-of-adjacent-flow-scalar.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `"key":`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `"key":`, Role: tokenRoleKey},
				{Text: `:value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "colon-followed-by-comma.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `:,`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "comment-and-document-end-marker.yaml",
			expected: []TokenWithText{
				{Text: `# comment`, Role: parser.TokenRoleComment},
				{Text: `...`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "comment-in-flow-sequence-before-comma.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `word1`, Role: tokenRoleScalar},
				{Text: `# comment`, Role: parser.TokenRoleComment},
				{Text: `word2`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "construct-binary.yaml",
			expected: []TokenWithText{
				{Text: `canonical:`, Role: tokenRoleKey},
				{Text: `!!binary`, Role: tokenRoleTag},
				{Text: `"\
 R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5\
 OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+\
 +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC\
 AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs="`,
					Role: parser.TokenRoleString},
				{Text: `generic:`, Role: tokenRoleKey},
				{Text: `!!binary`, Role: tokenRoleTag},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: ` R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5
 OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+
 +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC
 AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=`,
					Role: tokenRoleScalar},
				{Text: `description:`, Role: tokenRoleKey},
				{Text: `The binary value above is a tiny arrow encoded as a gif image.`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "document-end-marker.yaml",
			expected: []TokenWithText{
				{Text: `...`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "document-start-on-last-line.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `---`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "document-with-footer.yaml",
			expected: []TokenWithText{
				{Text: `aaa:`, Role: tokenRoleKey},
				{Text: `bbb`, Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "doublequoted-scalar-starting-with-a-tab.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `tab:`, Role: tokenRoleKey},
				{Text: `"\tstring"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "empty-flow-collections.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `nested sequences:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `key1:`, Role: tokenRoleKey},
				{Text: `key2:`, Role: tokenRoleKey},
			},
		},
		{
			filename: "empty-implicit-key-in-single-pair-flow-sequences.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `empty key`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `another empty key`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "empty-keys-in-block-and-flow-mapping.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `empty key`, Role: tokenRoleScalar},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `empty key`, Role: tokenRoleScalar},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `# empty key and value`, Role: parser.TokenRoleComment},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `# empty key and value`, Role: parser.TokenRoleComment},
				{Text: `:`, Role: tokenRoleKey},
			},
		},
		{
			filename: "empty-lines-at-end-of-document.yaml",
			expected: []TokenWithText{
				{Text: `:`, Role: tokenRoleKey},
			},
		},
		{
			filename: "empty-lines-between-mapping-elements.yaml",
			expected: []TokenWithText{
				{Text: `one:`, Role: tokenRoleKey},
				{Text: `2`, Role: parser.TokenRoleNumber},
				{Text: `three:`, Role: tokenRoleKey},
				{Text: `4`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "empty-stream.yaml",
			expected: []TokenWithText{},
		},
		{
			filename: "escaped-slash-in-double-quotes.yaml",
			expected: []TokenWithText{
				{Text: `escaped slash:`, Role: tokenRoleKey},
				{Text: `"a\/"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "explicit-key-and-value-seperated-by-comment.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `key`, Role: tokenRoleKey},
				{Text: `# comment`, Role: parser.TokenRoleComment},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "explicit-non-specific-tag-1-3.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "flow-mapping-colon-on-line-after-key.yaml",
			expected: []TokenWithText{
				{Text: `"foo"`, Role: tokenRoleKey},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `"bar"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "flow-mapping-in-block-sequence.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "flow-mapping-separate-values.yaml",
			expected: []TokenWithText{
				{Text: `unquoted :`, Role: tokenRoleKey},
				{Text: `http://foo.com`, Role: tokenRoleKey},
				{Text: `omitted value:`, Role: tokenRoleKey},
			},
		},
		{
			filename: "flow-mapping.yaml",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: `you`, Role: tokenRoleScalar},
				{Text: `bar:`, Role: tokenRoleKey},
				{Text: `far`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "flow-sequence-in-block-mapping.yaml",
			expected: []TokenWithText{
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "flow-sequence-in-flow-mapping.yaml",
			expected: []TokenWithText{
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c`, Role: tokenRoleScalar},
				{Text: `[d, e]:`, Role: tokenRoleKey},
				{Text: `f`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "flow-sequence-in-flow-sequence.yaml",
			expected: []TokenWithText{
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "flow-sequence.yaml",
			expected: []TokenWithText{
				{Text: `foo`, Role: tokenRoleScalar},
				{Text: `bar`, Role: tokenRoleScalar},
				{Text: `42`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "folded-block-scalar-1-3.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `>`, Role: parser.TokenRoleOperator},
				{Text: "  ab\n  cd\n\n\n  ef\n\n\n  gh", Role: tokenRoleScalar},
			},
		},
		{
			filename: "key-with-anchor-after-missing-explicit-mapping-value.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `1`, Role: parser.TokenRoleNumber},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `b`, Role: tokenRoleKey},
				{Text: `&anchor`, Role: tokenRoleAlias},
				{Text: `c:`, Role: tokenRoleKey},
				{Text: `3`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "literal-block-scalar.yaml",
			expected: []TokenWithText{
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "ab\n\n\n  cd\n  ef\n\n\n", Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "literal-unicode.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `wanted:`, Role: tokenRoleKey},
				{Text: `love ‚ô• and peace ‚òÆ`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "lookahead-test-cases.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `bla"keks:`, Role: tokenRoleKey},
				{Text: `foo`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `bla]keks:`, Role: tokenRoleKey},
				{Text: `foo`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "mapping-key-and-flow-sequence-item-anchors.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `&mapping`, Role: tokenRoleAlias},
				{Text: `&key`, Role: tokenRoleAlias},
				{Text: `[ &item a, b, c ]:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "mixed-block-mapping-explicit-to-implicit.yaml",
			expected: []TokenWithText{
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleKey},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `1.3`, Role: parser.TokenRoleNumber},
				{Text: `fifteen:`, Role: tokenRoleKey},
				{Text: `d`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "mixed-block-mapping-implicit-to-explicit.yaml",
			expected: []TokenWithText{
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `4.2`, Role: parser.TokenRoleNumber},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `d`, Role: tokenRoleKey},
				{Text: `:`, Role: tokenRoleKey},
				{Text: `23`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "more-indented-lines-at-the-beginning-of-folded-block-scalars.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `>2`, Role: parser.TokenRoleOperator},
				{Text: "more indented\n  regular", Role: tokenRoleScalar},
				{Text: `b:`, Role: tokenRoleKey},
				{Text: `>2`, Role: parser.TokenRoleOperator},
				{Text: " more indented\n  regular", Role: tokenRoleScalar},
			},
		},
		{
			filename: "multi-level-mapping-indent.yaml",
			expected: []TokenWithText{
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b:`, Role: tokenRoleKey},
				{Text: `c:`, Role: tokenRoleKey},
				{Text: `d`, Role: tokenRoleScalar},
				{Text: `e:`, Role: tokenRoleKey},
				{Text: `f:`, Role: tokenRoleKey},
				{Text: `g`, Role: tokenRoleScalar},
				{Text: `h:`, Role: tokenRoleKey},
				{Text: `i`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-doublequoted-flow-mapping-key-without-value.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `"single line"`, Role: tokenRoleKey},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: "\"multi\n  line\"", Role: tokenRoleKey},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-double-quoted-flow-mapping-key.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `"single line":`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: "\"multi\n  line\":", Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-plain-flow-mapping-key-without-value.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `single line`, Role: tokenRoleKey},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: "multi\n  line", Role: tokenRoleKey},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-plain-flow-mapping-key.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `single line`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: "multi\n  line:", Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-plain-scalar-with-empty-line.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `plain:`, Role: tokenRoleKey},
				{Text: "a\n  b\n\n  c", Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-plain-value-with-tabs-on-empty-lines.yaml",
			expected: []TokenWithText{
				{Text: `key:`, Role: tokenRoleKey},
				{Text: "value\n  with\n\t\n  tabs", Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-scalar-at-top-level-1-3.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: "a\nb\n  c\nd\n\ne", Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-scalar-in-mapping.yaml",
			expected: []TokenWithText{
				{Text: `a:`, Role: tokenRoleKey},
				{Text: "b\n c", Role: tokenRoleScalar},
				{Text: `d:`, Role: tokenRoleKey},
				{Text: "e\n  f", Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiline-scalar-that-looks-like-a-yaml-directive.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `scalar\n%YAML 1.2`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "multiple-entry-block-sequence.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `foo`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `bar`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `42`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "multiple-pair-block-mapping.yaml",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: `blue`, Role: tokenRoleScalar},
				{Text: `bar:`, Role: tokenRoleKey},
				{Text: `arrr`, Role: tokenRoleScalar},
				{Text: `baz:`, Role: tokenRoleKey},
				{Text: `jazz`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "nested-flow-collections-on-one-line.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c`, Role: tokenRoleScalar},
				{Text: `d:`, Role: tokenRoleKey},
				{Text: `e`, Role: tokenRoleScalar},
				{Text: `f`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "nested-flow-collections.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `a:`, Role: tokenRoleKey},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c`, Role: tokenRoleScalar},
				{Text: `d:`, Role: tokenRoleKey},
				{Text: `e`, Role: tokenRoleScalar},
				{Text: `f`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "nested-flow-mapping-sequence-and-mappings.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `top1:`, Role: tokenRoleKey},
				{Text: `item1`, Role: tokenRoleScalar},
				{Text: `key2:`, Role: tokenRoleKey},
				{Text: `value2`, Role: tokenRoleScalar},
				{Text: `item3`, Role: tokenRoleScalar},
				{Text: `top2:`, Role: tokenRoleKey},
				{Text: `value2`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "nested-implicit-complex-keys.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleScalar},
				{Text: `b`, Role: tokenRoleScalar},
				{Text: `c`, Role: tokenRoleScalar},
				{Text: `e`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "nested-top-level-flow-mapping.yaml",
			expected: []TokenWithText{
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "node-and-mapping-key-anchors-1-3.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `top1:`, Role: tokenRoleKey},
				{Text: `&node1`, Role: tokenRoleAlias},
				{Text: `&k1`, Role: tokenRoleAlias},
				{Text: `key1:`, Role: tokenRoleKey},
				{Text: `one`, Role: tokenRoleScalar},
				{Text: `top2:`, Role: tokenRoleKey},
				{Text: `&node2`, Role: tokenRoleAlias},
				{Text: `# comment`, Role: parser.TokenRoleComment},
				{Text: `key2:`, Role: tokenRoleKey},
				{Text: `two`, Role: tokenRoleScalar},
				{Text: `top3:`, Role: tokenRoleKey},
				{Text: `&k3`, Role: tokenRoleAlias},
				{Text: `key3:`, Role: tokenRoleKey},
				{Text: `three`, Role: tokenRoleScalar},
				{Text: `top4:`, Role: tokenRoleKey},
				{Text: `&node4`, Role: tokenRoleAlias},
				{Text: `&k4`, Role: tokenRoleAlias},
				{Text: `key4`, Role: tokenRoleKey},
				{Text: `four`, Role: tokenRoleScalar},
				{Text: `top5:`, Role: tokenRoleKey},
				{Text: `&node5`, Role: tokenRoleAlias},
				{Text: `key5:`, Role: tokenRoleKey},
				{Text: `five`, Role: tokenRoleScalar},
				{Text: `top6:`, Role: tokenRoleKey},
				{Text: `&val6`, Role: tokenRoleAlias},
				{Text: `six`, Role: tokenRoleScalar},
				{Text: `top7:`, Role: tokenRoleKey},
				{Text: `&val7`, Role: tokenRoleAlias},
				{Text: `sevent`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "non-specific-tags-on-scalars.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `plain`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `"double quoted"`, Role: parser.TokenRoleString},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `'single quoted'`, Role: parser.TokenRoleString},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `>`, Role: parser.TokenRoleOperator},
				{Text: `block`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `plain again`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "plain-dashes-in-flow-sequence.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: tokenRoleScalar},
				{Text: `-`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "plain-mapping-key-ending-with-colon.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `key ends with two colons:::`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "plain-scalar-looking-like-key-comment-anchor-and-tag.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `k:#foo\n  &a !t s`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "plain-scalar-with-backslashes.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `plain\value\with\backslashes`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "plain-url-in-flow-mapping.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `url:`, Role: tokenRoleKey},
				{Text: `http://example.org`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "question-marks-in-scalars.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `a?string`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `another ? string`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value?`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `a?string`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `another ? string`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value?`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `value?`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `key?:`, Role: tokenRoleKey},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "sequence-entry-that-looks-like-two-with-wrong-indentation.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: "single multiline\n - sequence entry"},
			},
		},
		{
			filename: "sequence-indent.yaml",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `42`, Role: parser.TokenRoleNumber},
				{Text: `bar:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `44`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "sequence-with-same-indentation-as-parent-mapping.yaml",
			expected: []TokenWithText{
				{Text: `one:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `2`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `3`, Role: parser.TokenRoleNumber},
				{Text: `four:`, Role: tokenRoleKey},
				{Text: `5`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "simple-mapping-indent.yaml",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: `bar:`, Role: tokenRoleKey},
				{Text: `baz`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "single-block-sequence-with-anchor-and-explicit-document-start.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `&sequence`, Role: tokenRoleAlias},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "single-block-sequence-with-anchor.yaml",
			expected: []TokenWithText{
				{Text: `&sequence`, Role: tokenRoleAlias},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `a`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "single-entry-block-sequence.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `foo`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "single-pair-block-mapping.yaml",
			expected: []TokenWithText{
				{Text: `foo:`, Role: tokenRoleKey},
				{Text: `bar`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "single-pair-implicit-entries.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `YAML : separate`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `"JSON like"`, Role: parser.TokenRoleString},
				{Text: `adjacent`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `JSON:`, Role: tokenRoleKey},
				{Text: `like`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-10-node-for-sammy-sosa-appears-twice-in-this-document.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `hr:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `# Following node labeled SS`, Role: parser.TokenRoleComment},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `&SS`, Role: tokenRoleAlias},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `rbi:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `*SS`, Role: tokenRoleAlias},
				{Text: `# Subsequent occurrence`, Role: parser.TokenRoleComment},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Ken Griffey`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-11-mapping-between-sequences.yaml",
			expected: []TokenWithText{
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: "- Detroit Tigers\n  - Chicago cubs\n:", Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `2001-07-23`, Role: tokenRoleScalar},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: "[ New York Yankees,\n    Atlanta Braves ]\n:", Role: tokenRoleKey},
				{Text: `2001-07-02`, Role: tokenRoleScalar},
				{Text: `2001-08-12`, Role: tokenRoleScalar},
				{Text: `2001-08-14`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-12-compact-nested-mapping.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `# Products purchased`, Role: parser.TokenRoleComment},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `item    :`, Role: tokenRoleKey},
				{Text: `Super Hoop`, Role: tokenRoleScalar},
				{Text: `quantity:`, Role: tokenRoleKey},
				{Text: `1`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `item    :`, Role: tokenRoleKey},
				{Text: `Basketball`, Role: tokenRoleScalar},
				{Text: `quantity:`, Role: tokenRoleKey},
				{Text: `4`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `item    :`, Role: tokenRoleKey},
				{Text: `Big Shoes`, Role: tokenRoleScalar},
				{Text: `quantity:`, Role: tokenRoleKey},
				{Text: `1`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "spec-example-2-13-in-literals-newlines-are-preserved.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "\\//||\\/||\n  // ||  ||__", Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-14-in-the-folded-scalars-newlines-become-spaces.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `>`, Role: parser.TokenRoleOperator},
				{Text: "Mark McGwire's\n  year was crippled\n  by a knee injury.", Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-16-indentation-determines-scope.yaml",
			expected: []TokenWithText{
				{Text: `name:`, Role: tokenRoleKey},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `accomplishment:`, Role: tokenRoleKey},
				{Text: `>`, Role: parser.TokenRoleOperator},
				{Text: "Mark set a major league\n  home run record in 1998.", Role: tokenRoleScalar},
				{Text: `stats:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "65 Homne Runs\n  0.278 Batting Average", Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-17-quoted-scalars.yaml",
			expected: []TokenWithText{
				{Text: `unicode:`, Role: tokenRoleKey},
				{Text: `"Sosa did fine.\u263A"`, Role: parser.TokenRoleString},
				{Text: `control:`, Role: tokenRoleKey},
				{Text: `"\b1998\t1999\t2000\n"`, Role: parser.TokenRoleString},
				{Text: `hex esc:`, Role: tokenRoleKey},
				{Text: `"\x0d\x0a is \r\n"`, Role: parser.TokenRoleString},
				{Text: `single:`, Role: tokenRoleKey},
				{Text: `'"Howdy!" he cried.'`, Role: parser.TokenRoleString},
				{Text: `quoted:`, Role: tokenRoleKey},
				{Text: `' # Not a ''comment''.'`, Role: parser.TokenRoleString},
				{Text: `tie-fighter:`, Role: tokenRoleKey},
				{Text: `'|\-*-/|'`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-2-18-multi-line-flow-scalars.yaml",
			expected: []TokenWithText{
				{Text: `plain:`, Role: tokenRoleKey},
				{Text: "This unquoted scalar\n  spans many lines", Role: tokenRoleScalar},
				{Text: `quoted:`, Role: tokenRoleKey},
				{Text: "\"So does this\n  quoted scalar.\\n\"", Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-2-1-sequence-of-scalars.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Ken Griffey`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-24-global-tags.yaml",
			expected: []TokenWithText{
				{Text: `%TAG ! tag:clarkevans.com,2002:`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!shape`, Role: tokenRoleTag},
				{Text: `# Use the ! handle for presenting`, Role: parser.TokenRoleComment},
				{Text: `# tag:clarkevans.com,2002:circle`, Role: parser.TokenRoleComment},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `!circle`, Role: tokenRoleTag},
				{Text: `center:`, Role: tokenRoleKey},
				{Text: `&ORIGIN`, Role: tokenRoleAlias},
				{Text: `x:`, Role: tokenRoleKey},
				{Text: `73`, Role: parser.TokenRoleNumber},
				{Text: `y:`, Role: tokenRoleKey},
				{Text: `129`, Role: parser.TokenRoleNumber},
				{Text: `radius:`, Role: tokenRoleKey},
				{Text: `7`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `!line`, Role: tokenRoleTag},
				{Text: `start:`, Role: tokenRoleKey},
				{Text: `*ORIGIN`, Role: tokenRoleAlias},
				{Text: `finish:`, Role: tokenRoleKey},
				{Text: `x:`, Role: tokenRoleKey},
				{Text: `89`, Role: parser.TokenRoleNumber},
				{Text: `y:`, Role: tokenRoleKey},
				{Text: `102`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `!label`, Role: tokenRoleTag},
				{Text: `start:`, Role: tokenRoleKey},
				{Text: `*ORIGIN`, Role: tokenRoleAlias},
				{Text: `color:`, Role: tokenRoleKey},
				{Text: `0xFFEEBB`, Role: parser.TokenRoleNumber},
				{Text: `text:`, Role: tokenRoleKey},
				{Text: `Pretty vector drawing.`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-25-unordered-sets.yaml",
			expected: []TokenWithText{
				{Text: `# Sets are represented as a`, Role: parser.TokenRoleComment},
				{Text: `# Mapping where each key is`, Role: parser.TokenRoleComment},
				{Text: `# associated with a null value`, Role: parser.TokenRoleComment},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!!set`, Role: tokenRoleTag},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: `Ken Griff`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-26-ordered-mappings.yaml",
			expected: []TokenWithText{
				{Text: `# The !!omap tag is one of the optional types`, Role: parser.TokenRoleComment},
				{Text: `# introduced for YAML 1.1. In 1.2, it is not`, Role: parser.TokenRoleComment},
				{Text: `# part of the standard tags and should not be`, Role: parser.TokenRoleComment},
				{Text: `# enabled by default.`, Role: parser.TokenRoleComment},
				{Text: `# Ordered maps are represented as`, Role: parser.TokenRoleComment},
				{Text: `# A sequence of mappings, with`, Role: parser.TokenRoleComment},
				{Text: `# each mapping having one key`, Role: parser.TokenRoleComment},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!!omap`, Role: tokenRoleTag},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Mark McGwire:`, Role: tokenRoleKey},
				{Text: `65`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Sammy Sosa`, Role: tokenRoleKey},
				{Text: `63`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Ken Griffy`, Role: tokenRoleKey},
				{Text: `58`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "spec-example-2-27-invoice.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!<tag:clarkevans.com,2002:invoice>`, Role: tokenRoleTag},
				{Text: `invoice:`, Role: tokenRoleKey},
				{Text: `34843`, Role: parser.TokenRoleNumber},
				{Text: `date    :`, Role: tokenRoleKey},
				{Text: `2001-01-23`, Role: tokenRoleScalar},
				{Text: `bill-to:`, Role: tokenRoleKey},
				{Text: `&id001`, Role: tokenRoleAlias},
				{Text: `given  :`, Role: tokenRoleKey},
				{Text: `Chris`, Role: tokenRoleScalar},
				{Text: `family :`, Role: tokenRoleKey},
				{Text: `Dumars`, Role: tokenRoleScalar},
				{Text: `address:`, Role: tokenRoleKey},
				{Text: `lines:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "458 Walman Dr.\n            Suite #292", Role: tokenRoleScalar},
				{Text: `city     :`, Role: tokenRoleKey},
				{Text: `Royal Oak`, Role: tokenRoleScalar},
				{Text: `state   :`, Role: tokenRoleKey},
				{Text: `MI`, Role: tokenRoleScalar},
				{Text: `postal  :`, Role: tokenRoleKey},
				{Text: `48046`, Role: parser.TokenRoleNumber},
				{Text: `ship-to:`, Role: tokenRoleKey},
				{Text: `*id001`, Role: tokenRoleAlias},
				{Text: `product:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `sku         :`, Role: tokenRoleKey},
				{Text: `BL394D`, Role: tokenRoleScalar},
				{Text: `quantity    :`, Role: tokenRoleKey},
				{Text: `4`, Role: parser.TokenRoleNumber},
				{Text: `description :`, Role: tokenRoleKey},
				{Text: `Basketball`, Role: tokenRoleScalar},
				{Text: `price       :`, Role: tokenRoleKey},
				{Text: `450.00`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `sku         :`, Role: tokenRoleKey},
				{Text: `BL4438H`, Role: tokenRoleScalar},
				{Text: `quantity    :`, Role: tokenRoleKey},
				{Text: `1`, Role: parser.TokenRoleNumber},
				{Text: `description :`, Role: tokenRoleKey},
				{Text: `Super Hoop`, Role: tokenRoleScalar},
				{Text: `price       :`, Role: tokenRoleKey},
				{Text: `2392.00`, Role: parser.TokenRoleNumber},
				{Text: `tax  :`, Role: tokenRoleKey},
				{Text: `251.42`, Role: parser.TokenRoleNumber},
				{Text: `total:`, Role: tokenRoleKey},
				{Text: `4443.52`, Role: parser.TokenRoleNumber},
				{Text: `comments:`, Role: tokenRoleKey},
				{Text: "Late afternoon is best.\n    Backup contact is Nancy\n    Billsmer @ 338-4338.", Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-28-log-file.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `Time:`, Role: tokenRoleKey},
				{Text: `2001-11-23 15:01:42 -5`, Role: tokenRoleScalar},
				{Text: `User:`, Role: tokenRoleKey},
				{Text: `ed`, Role: tokenRoleScalar},
				{Text: `Warning:`, Role: tokenRoleKey},
				{Text: "This is an error message\n  for the log file", Role: tokenRoleScalar},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `Time:`, Role: tokenRoleKey},
				{Text: `2001-11-23 15:02:31 -5`, Role: tokenRoleScalar},
				{Text: `User:`, Role: tokenRoleKey},
				{Text: `ed`, Role: tokenRoleScalar},
				{Text: `Warning:`, Role: tokenRoleKey},
				{Text: "A slightly different error\n  message.", Role: tokenRoleScalar},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `Date:`, Role: tokenRoleKey},
				{Text: `2001-11-23 15:03:17 -5`, Role: tokenRoleScalar},
				{Text: `User:`, Role: tokenRoleKey},
				{Text: `ed`, Role: tokenRoleScalar},
				{Text: `Fatal:`, Role: tokenRoleKey},
				{Text: `Unknown variable "bar"`, Role: tokenRoleScalar},
				{Text: `Stack:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `file:`, Role: tokenRoleKey},
				{Text: `TopClass.py`, Role: tokenRoleScalar},
				{Text: `line:`, Role: tokenRoleKey},
				{Text: `23`, Role: parser.TokenRoleNumber},
				{Text: `code:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: `x = MoreObject("345\n")`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `file:`, Role: tokenRoleKey},
				{Text: `MoreClass.py`, Role: tokenRoleScalar},
				{Text: `line:`, Role: tokenRoleKey},
				{Text: `58`, Role: parser.TokenRoleNumber},
				{Text: `code:`, Role: tokenRoleKey},
				{Text: `|-`, Role: parser.TokenRoleOperator},
				{Text: `foo = bar`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-2-mapping-scalars-to-scalars.yaml",
			expected: []TokenWithText{
				{Text: `hr:`, Role: tokenRoleKey},
				{Text: `65`, Role: parser.TokenRoleNumber},
				{Text: `# Home runs`, Role: parser.TokenRoleComment},
				{Text: `avg:`, Role: tokenRoleKey},
				{Text: `0.278`, Role: parser.TokenRoleNumber},
				{Text: `# Batting average`, Role: parser.TokenRoleComment},
				{Text: `rbi:`, Role: tokenRoleKey},
				{Text: `147`, Role: parser.TokenRoleNumber},
				{Text: `# Runs Batted In`, Role: parser.TokenRoleComment},
			},
		},
		{
			filename: "spec-example-2-3-mapping-scalars-to-sequences.yaml",
			expected: []TokenWithText{
				{Text: `american:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Boston Red Sox`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Detroit Tigers`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `New York Yankees`, Role: tokenRoleScalar},
				{Text: `national:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `New York Mets`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Chicago Cubs`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Atlanta Braves`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-4-sequence-of-mappings.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `name:`, Role: tokenRoleKey},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `hr:`, Role: tokenRoleKey},
				{Text: `65`, Role: parser.TokenRoleNumber},
				{Text: `avg:`, Role: tokenRoleKey},
				{Text: `0.278`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `name:`, Role: tokenRoleKey},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `hr:`, Role: tokenRoleKey},
				{Text: `63`, Role: parser.TokenRoleNumber},
				{Text: `avg:`, Role: tokenRoleKey},
				{Text: `0.288`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "spec-example-2-5-sequence-of-sequences.yaml",
			expected: []TokenWithText{
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `name`, Role: tokenRoleScalar},
				{Text: `hr`, Role: tokenRoleScalar},
				{Text: `avg`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `65`, Role: parser.TokenRoleNumber},
				{Text: `0.278`, Role: parser.TokenRoleNumber},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `63`, Role: parser.TokenRoleNumber},
				{Text: `0.288`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "spec-example-2-6-mapping-of-mappings.yaml",
			expected: []TokenWithText{
				{Text: `Mark McGwire:`, Role: tokenRoleKey},
				{Text: `hr:`, Role: tokenRoleKey},
				{Text: `65`, Role: parser.TokenRoleNumber},
				{Text: `avg:`, Role: tokenRoleKey},
				{Text: `0.278`, Role: parser.TokenRoleNumber},
				{Text: `Sammy Sosa:`, Role: tokenRoleKey},
				{Text: `hr:`, Role: tokenRoleKey},
				{Text: `63`, Role: parser.TokenRoleNumber},
				{Text: `avg:`, Role: tokenRoleKey},
				{Text: `0.288`, Role: parser.TokenRoleNumber},
			},
		},
		{
			filename: "spec-example-2-7-two-documents-in-a-stream.yaml",
			expected: []TokenWithText{
				{Text: `# Ranking of 1998 home runs`, Role: parser.TokenRoleComment},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Ken Griffey`, Role: tokenRoleScalar},
				{Text: `# Team ranking`, Role: parser.TokenRoleComment},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Chicago Cubs`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `St Louis Cardinals`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-2-8-play-by-play-feed-from-a-game.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `time:`, Role: tokenRoleKey},
				{Text: `20:03:20`, Role: tokenRoleScalar},
				{Text: `player:`, Role: tokenRoleKey},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `action:`, Role: tokenRoleKey},
				{Text: `strike (miss)`, Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `time:`, Role: tokenRoleKey},
				{Text: `20:03:47`, Role: tokenRoleScalar},
				{Text: `player:`, Role: tokenRoleKey},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `action:`, Role: tokenRoleKey},
				{Text: `grand slam`, Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
			},
		},
		{
			filename: "spec-example-2-9-single-document-with-two-comments.yaml",
			expected: []TokenWithText{
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `hr:`, Role: tokenRoleKey},
				{Text: `# 1998 hr ranking`, Role: parser.TokenRoleComment},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Mark McGwire`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `rbi:`, Role: tokenRoleKey},
				{Text: `# 1998 rbi ranking`, Role: parser.TokenRoleComment},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Sammy Sosa`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `Ken Griffey`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-5-12-tabs-and-spaces.yaml",
			expected: []TokenWithText{
				{Text: `# Tabs and spaces`, Role: parser.TokenRoleComment},
				{Text: `quoted:`, Role: tokenRoleKey},
				{Text: `"Quoted 	"`, Role: parser.TokenRoleString},
				{Text: `block:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "void main() {\n  	printf(\"Hello, world!\\n\");\n}", Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-5-3-block-structure-indicators.yaml",
			expected: []TokenWithText{
				{Text: `sequence:`, Role: tokenRoleKey},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `one`, Role: tokenRoleScalar},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `two`, Role: tokenRoleScalar},
				{Text: `mapping:`, Role: tokenRoleKey},
				{Text: `?`, Role: parser.TokenRoleOperator},
				{Text: "sky\n  :", Role: tokenRoleKey},
				{Text: `blue`, Role: tokenRoleScalar},
				{Text: `sea :`, Role: tokenRoleKey},
				{Text: `green`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-5-4-flow-collection-indicators.yaml",
			expected: []TokenWithText{
				{Text: `sequence:`, Role: tokenRoleKey},
				{Text: `one`, Role: tokenRoleScalar},
				{Text: `two`, Role: tokenRoleScalar},
				{Text: `mapping:`, Role: tokenRoleKey},
				{Text: `sky:`, Role: tokenRoleKey},
				{Text: `blue`, Role: tokenRoleScalar},
				{Text: `sea:`, Role: tokenRoleKey},
				{Text: `green`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-5-5-comment-indicator.yaml",
			expected: []TokenWithText{
				{Text: `# Comment only.`, Role: parser.TokenRoleComment},
			},
		},
		{
			filename: "spec-example-5-6-node-property-indicators.yaml",
			expected: []TokenWithText{
				{Text: `anchored:`, Role: tokenRoleKey},
				{Text: `!local`, Role: tokenRoleTag},
				{Text: `&anchor`, Role: tokenRoleAlias},
				{Text: `value`, Role: tokenRoleScalar},
				{Text: `alias:`, Role: tokenRoleKey},
				{Text: `*anchor`, Role: tokenRoleAlias},
			},
		},
		{
			filename: "spec-example-5-7-block-scalar-indicators.yaml",
			expected: []TokenWithText{
				{Text: `literal:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "some\n  text", Role: tokenRoleScalar},
				{Text: `folded:`, Role: tokenRoleKey},
				{Text: `>`, Role: parser.TokenRoleOperator},
				{Text: "some\n  text", Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-5-8-quoted-scalar-indicators.yaml",
			expected: []TokenWithText{
				{Text: `single:`, Role: tokenRoleKey},
				{Text: `'text'`, Role: parser.TokenRoleString},
				{Text: `double:`, Role: tokenRoleKey},
				{Text: `"text"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-6-10-comment-lines.yaml",
			expected: []TokenWithText{
				{Text: `# Comment`, Role: parser.TokenRoleComment},
			},
		},
		{
			filename: "spec-example-6-11-multi-line-comments.yaml",
			expected: []TokenWithText{
				{Text: `key:`, Role: tokenRoleKey},
				{Text: `# Comment`, Role: parser.TokenRoleComment},
				{Text: `# lines`, Role: parser.TokenRoleComment},
				{Text: `value`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-6-13-reserved-directives-1-3.yaml",
			expected: []TokenWithText{
				{Text: `%FOO  bar baz`, Role: tokenRoleDirective},
				{Text: `# Should be ignored`, Role: parser.TokenRoleComment},
				{Text: `# with a warning`, Role: parser.TokenRoleComment},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `"foo"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-6-14-yaml-directive.yaml",
			expected: []TokenWithText{
				{Text: `%YAML 1.3`, Role: tokenRoleDirective},
				{Text: `# Attempt parsing`, Role: parser.TokenRoleComment},
				{Text: `# with a warning`, Role: parser.TokenRoleComment},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `"foo"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-6-16-tag-directive.yaml",
			expected: []TokenWithText{
				{Text: `%TAG !yaml! tag:yaml.org,2002:`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!yaml!str`, Role: tokenRoleTag},
				{Text: `"foo"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-6-18-primary-tag-handle-1-3.yaml",
			expected: []TokenWithText{
				{Text: `# Private`, Role: parser.TokenRoleComment},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!foo`, Role: tokenRoleTag},
				{Text: `"bar"`, Role: parser.TokenRoleString},
				{Text: `...`, Role: parser.TokenRoleOperator},
				{Text: `# Global`, Role: parser.TokenRoleComment},
				{Text: `%TAG ! tag:example.com,2000:app/`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!foo`, Role: tokenRoleTag},
				{Text: `"bar"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-6-19-secondary-tag-handle.yaml",
			expected: []TokenWithText{
				{Text: `%TAG !! tag:example.com,2000:app/`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!!int`, Role: tokenRoleTag},
				{Text: `1 - 3`, Role: tokenRoleScalar},
				{Text: `# Interval, not integer`, Role: parser.TokenRoleComment},
			},
		},
		{
			filename: "spec-example-6-1-indentation-spaces.yaml",
			expected: []TokenWithText{
				{Text: `# Leading comment line spaces are`, Role: parser.TokenRoleComment},
				{Text: `# neither content nor indentation.`, Role: parser.TokenRoleComment},
				{Text: `Not indented:`, Role: tokenRoleKey},
				{Text: `By one space:`, Role: tokenRoleKey},
				{Text: `|`, Role: parser.TokenRoleOperator},
				{Text: "By four\n      spaces", Role: tokenRoleScalar},
				{Text: `Flow style:`, Role: tokenRoleKey},
				{Text: `# Leading spaces`, Role: parser.TokenRoleComment},
				{Text: `By two`, Role: tokenRoleScalar},
				{Text: `# in flow style`, Role: parser.TokenRoleComment},
				{Text: `Also by two`, Role: tokenRoleScalar},
				{Text: `# are neither`, Role: parser.TokenRoleComment},
				{Text: `Still by two`, Role: tokenRoleScalar},
				{Text: `# content nor`, Role: parser.TokenRoleComment},
				{Text: `# indentation`, Role: parser.TokenRoleComment},
			},
		},
		{
			filename: "spec-example-6-20-tag-handles.yaml",
			expected: []TokenWithText{
				{Text: `%TAG !e! tag:example.com,2000:app/`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `!e!foo`, Role: tokenRoleTag},
				{Text: `"bar"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-6-21-local-tag-prefix.yaml",
			expected: []TokenWithText{
				{Text: `%TAG !m! !my-`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `# Bulb here`, Role: parser.TokenRoleComment},
				{Text: `!m!light`, Role: tokenRoleTag},
				{Text: `fluorescent`, Role: tokenRoleScalar},
				{Text: `...`, Role: parser.TokenRoleOperator},
				{Text: `%TAG !m! !my-`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `# Color here`, Role: parser.TokenRoleComment},
				{Text: `!m!light`, Role: tokenRoleTag},
				{Text: `green`, Role: tokenRoleScalar},
			},
		},
		{
			filename: "spec-example-6-22-global-tag-prefix.yaml",
			expected: []TokenWithText{
				{Text: `%TAG !e! tag:example.com,2000:app/`, Role: tokenRoleDirective},
				{Text: `---`, Role: parser.TokenRoleOperator},
				{Text: `-`, Role: parser.TokenRoleOperator},
				{Text: `!e!foo`, Role: tokenRoleTag},
				{Text: `"bar"`, Role: parser.TokenRoleString},
			},
		},
		{
			filename: "spec-example-6-23-node-properties.yaml",
			expected: []TokenWithText{
				{Text: `!!str`, Role: tokenRoleTag},
				{Text: `&a1`, Role: tokenRoleAlias},
				{Text: `"foo":`, Role: tokenRoleKey},
				{Text: `!!str`, Role: tokenRoleTag},
				{Text: `bar`, Role: tokenRoleScalar},
				{Text: `&a2`, Role: tokenRoleAlias},
				{Text: `baz :`, Role: tokenRoleKey},
				{Text: `*a1`, Role: tokenRoleAlias},
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.filename, func(t *testing.T) {
			// All files in this directory are derived from the YAML Test Suite
			// https://github.com/yaml/yaml-test-suite
			data, err := os.ReadFile(path.Join("testdata", "yaml", tc.filename))
			require.NoError(t, err)
			tokens := ParseTokensWithText(YamlParseFunc(), string(data))
			assert.Equal(t, tc.expected, tokens)
		})
	}
}
